"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fs = require("fs");
var dockerfile_ast_1 = require("dockerfile-ast");
function getBaseImageName(targetFile) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var contents, dockerfile, from, fromVariables, baseImage, resolvedVariables_1;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!targetFile) {
                        return [2 /*return*/, undefined];
                    }
                    return [4 /*yield*/, readFile(targetFile)];
                case 1:
                    contents = _a.sent();
                    dockerfile = dockerfile_ast_1.DockerfileParser.parse(contents);
                    from = dockerfile.getFROMs().pop();
                    if (!from) {
                        return [2 /*return*/, undefined];
                    }
                    fromVariables = from.getVariables();
                    baseImage = from.getImage();
                    if (fromVariables) {
                        resolvedVariables_1 = fromVariables.reduce(function (resolvedVars, variable) {
                            var line = variable.getRange().start.line;
                            var name = variable.getName();
                            resolvedVars[name] = dockerfile.resolveVariable(name, line);
                            return resolvedVars;
                        }, {});
                        Object.keys(resolvedVariables_1).forEach(function (variable) {
                            baseImage = baseImage.replace("${" + variable + "}", resolvedVariables_1[variable]);
                        });
                    }
                    return [2 /*return*/, baseImage];
            }
        });
    });
}
exports.getBaseImageName = getBaseImageName;
function readFile(path) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    fs.readFile(path, 'utf8', function (err, data) {
                        return err ? reject(err) : resolve(data);
                    });
                })];
        });
    });
}
//# sourceMappingURL=docker-file.js.map