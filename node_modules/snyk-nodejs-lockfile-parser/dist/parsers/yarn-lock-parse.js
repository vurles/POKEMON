"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var _ = require("lodash");
var _1 = require("./");
var get_node_runtime_version_1 = require("../get-node-runtime-version");
var event_loop_spinner_1 = require("../event-loop-spinner");
var errors_1 = require("../errors");
var YarnLockParser = /** @class */ (function () {
    function YarnLockParser() {
        // @yarnpkg/lockfile doesn't work with Node.js < 6 and crashes just after
        // the import, so it has to be required conditionally
        // more details at https://github.com/yarnpkg/yarn/issues/6304
        if (get_node_runtime_version_1.default() < 6) {
            throw new errors_1.UnsupportedRuntimeError('yarn.lock parsing is supported for ' +
                'Node.js v6 and higher.');
        }
        this.yarnLockfileParser = require('@yarnpkg/lockfile');
        // 200ms is an arbitrary value based on on testing "average request", which is
        // processed in ~150ms. Idea is to let those average requests through in one
        // tick and split only bigger ones.
        this.eventLoop = new event_loop_spinner_1.EventLoopSpinner(200);
    }
    YarnLockParser.prototype.parseLockFile = function (lockFileContents) {
        try {
            var yarnLock = this.yarnLockfileParser.parse(lockFileContents);
            yarnLock.dependencies = yarnLock.object;
            yarnLock.type = _1.LockfileType.yarn;
            return yarnLock;
        }
        catch (e) {
            throw new errors_1.InvalidUserInputError('yarn.lock parsing failed with an ' +
                ("error: " + e.message));
        }
    };
    YarnLockParser.prototype.getDependencyTree = function (manifestFile, lockfile, includeDev, strict) {
        if (includeDev === void 0) { includeDev = false; }
        if (strict === void 0) { strict = true; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var yarnLock, depTree, topLevelDeps, _i, topLevelDeps_1, dep, _a, _b;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (lockfile.type !== _1.LockfileType.yarn) {
                            throw new errors_1.InvalidUserInputError('Unsupported lockfile provided. ' +
                                'Please provide `package-lock.json`.');
                        }
                        yarnLock = lockfile;
                        depTree = {
                            dependencies: {},
                            hasDevDependencies: !_.isEmpty(manifestFile.devDependencies),
                            name: manifestFile.name,
                            version: manifestFile.version || '',
                        };
                        topLevelDeps = _1.getTopLevelDeps(manifestFile, includeDev);
                        // asked to process empty deps
                        if (_.isEmpty(manifestFile.dependencies) && !includeDev) {
                            return [2 /*return*/, depTree];
                        }
                        _i = 0, topLevelDeps_1 = topLevelDeps;
                        _c.label = 1;
                    case 1:
                        if (!(_i < topLevelDeps_1.length)) return [3 /*break*/, 5];
                        dep = topLevelDeps_1[_i];
                        if (!/^file:/.test(dep.version)) return [3 /*break*/, 2];
                        depTree.dependencies[dep.name] = _1.createPkgTreeFromDep(dep);
                        return [3 /*break*/, 4];
                    case 2:
                        _a = depTree.dependencies;
                        _b = dep.name;
                        return [4 /*yield*/, this.buildSubTreeRecursiveFromYarnLock(dep, yarnLock, [], strict)];
                    case 3:
                        _a[_b] = _c.sent();
                        _c.label = 4;
                    case 4:
                        _i++;
                        return [3 /*break*/, 1];
                    case 5: return [2 /*return*/, depTree];
                }
            });
        });
    };
    YarnLockParser.prototype.buildSubTreeRecursiveFromYarnLock = function (searchedDep, lockFile, depPath, strict) {
        if (strict === void 0) { strict = true; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var depSubTree, depKey, dep, newDeps, _i, newDeps_1, _a, name, version, newDep, _b, _c;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        depSubTree = {
                            depType: searchedDep.dev ? _1.DepType.dev : _1.DepType.prod,
                            dependencies: {},
                            name: searchedDep.name,
                            version: '',
                        };
                        depKey = searchedDep.name + "@" + searchedDep.version;
                        dep = _.get(lockFile.object, depKey);
                        if (!dep) {
                            if (strict) {
                                throw new errors_1.OutOfSyncError(searchedDep.name, 'yarn');
                            }
                            depSubTree.version = searchedDep.version;
                            depSubTree.missingLockFileEntry = true;
                            return [2 /*return*/, depSubTree];
                        }
                        depSubTree.version = dep.version;
                        if (!(depPath.indexOf(depKey) >= 0)) return [3 /*break*/, 1];
                        depSubTree.cyclic = true;
                        return [3 /*break*/, 5];
                    case 1:
                        depPath.push(depKey);
                        newDeps = _.entries(tslib_1.__assign({}, dep.dependencies, dep.optionalDependencies));
                        _i = 0, newDeps_1 = newDeps;
                        _d.label = 2;
                    case 2:
                        if (!(_i < newDeps_1.length)) return [3 /*break*/, 5];
                        _a = newDeps_1[_i], name = _a[0], version = _a[1];
                        newDep = {
                            dev: searchedDep.dev,
                            name: name,
                            version: version,
                        };
                        _b = depSubTree.dependencies;
                        _c = name;
                        return [4 /*yield*/, this.buildSubTreeRecursiveFromYarnLock(newDep, lockFile, depPath.slice())];
                    case 3:
                        _b[_c] = _d.sent();
                        _d.label = 4;
                    case 4:
                        _i++;
                        return [3 /*break*/, 2];
                    case 5:
                        if (!this.eventLoop.isStarving()) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.eventLoop.spin()];
                    case 6:
                        _d.sent();
                        _d.label = 7;
                    case 7: return [2 /*return*/, depSubTree];
                }
            });
        });
    };
    return YarnLockParser;
}());
exports.YarnLockParser = YarnLockParser;
//# sourceMappingURL=yarn-lock-parse.js.map